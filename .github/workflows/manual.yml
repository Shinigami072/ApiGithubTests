# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  greet:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: Send greeting
      run: echo "Hello ${{ inputs.name }}"
    - name: Script
      uses: actions/github-script@v6
      with:
          script: |
            const fs = require('fs');
            const errors = [];
            const addError = (error) => {
              errors.push(`:x: ${error}`);
              core.error(`:x: ${error}`)
              console.log('Found issue: ' + error);
            };

            const warnings = [];
            const addWarning = (warning) => {
              warnings.push(`:warning: ${warning}`);
              core.warn(`:x: ${error}`)
              console.log('Found issue: ' + warning);
            }
            const owner = "Shinigami072"
            const repo = "Test-Doc-Target"
            
            try {
              const repository = await github.rest.repos.get({owner, repo});
              if (!repository.data.has_issues) {
                addWarning('Your repository does not have issues enabled. Users will not be able to report bugs and request features.');
              }

              console.log(repository)
              console.log(JSON.stringify(repository))
            } catch (e) {
              addError(`E: \`${e}\`.`);
            }

             try {
              let adrs = await github.rest.repos.getContent({
                  owner,
                  repo,
                  path: 'docs/adr',
                });             
              console.log(adrs)
              console.log(JSON.stringify(adrs))
            } catch (e) {
              addError(`E: \`${e}\`.`);
            }

             


            
